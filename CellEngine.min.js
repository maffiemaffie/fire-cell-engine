class Model{constructor(t=5,e=40,n=5,s=10,i=!0){this.controller=new Controller(t,e,n,s);const a=new RectScale(t,e,n,s,!0);this.renderer=new CellRenderer,this.addControl(a)}addControl(t){this.controller.addControl(t),t.exportControls().forEach((t=>{document.getElementById(t).addEventListener("input",this.handleInput.bind(this))})),this.renderer.update(t.id,t.getValue())}handleInput(t){const e=t.target.closest(".m-control--container").id,n=this.controller.handleInput(t);this.renderer.update(e,n)}draw(){this.renderer.draw()}setPrep(t){this.renderer.setPrep(t)}setDraw(t){this.renderer.update("DRAW",t)}}class CellRenderer{constructor(t,e=t){this.data={},this.data.SCALE={x:t,y:e},this.data.WIDTH=width,this.data.HEIGHT=height,this.data.DRAW=(t,e)=>{const n=max(abs(t),abs(e));fill(255-255*n),rect(0,0,n)},this.prep=this._defaultPrep}setPrep(t){this.prep=t}_defaultPrep(){noStroke(),rectMode(CENTER),ellipseMode(CENTER)}update(t,e){this.data[t]=e}draw(){const t=this.data.SCALE.x,e=this.data.SCALE.y,n=this.data.HEIGHT,s=this.data.WIDTH,i=this.data.DRAW;for(let a=0;a<e;a++)for(let l=0;l<t;l++)push(),this.prep(),translate(map(l+.5,0,t,0,s),map(a+.5,0,e,0,n)),scale(s/t,n/e),i(map(l+.5,0,t,-1,1),map(a+.5,0,e,-1,1),this.data),pop()}}class Controller{constructor(){this.controls={},this.html='\n            <div class="m-control-panel"></div>\n        ',script.parentElement.insertAdjacentHTML("beforeend",this.html)}addControl(t){this.controls[t.id]=t;document.getElementsByClassName("m-control-panel")[0].insertAdjacentHTML("beforeend",t.html)}handleInput(t){const e=t.target.closest(".m-control--container").id;return this.controls[e].handleInput(t)}}class Control{constructor(t,e,n){this.name=t,this.value=e,this.inputs={},void 0===n?(this.id=t,warn("ID defaulted to display name. Unexpected behavior may occur.")):this.id=n}_createHTML(){return this.html=`\n            <div id="${this.id}" class="m-control--container m-generic">\n                <div class="m-control--label">${this.name}</div>\n                <div class="m-control--input">\n                    <input name="${this.name}" value="${this.value}"/>\n                </div>\n                <div class="m-control--display">${this.value}</div>\n            </div>\n        `}exportControls(){throw"dawg please overwrite this :SCcrying:"}getValue(){throw"this is a abstract class yo"}handleInput(){throw"this shit ain't set up right"}}class RectScale extends Control{constructor(t,e,n,s,i=!0){super("Scale",s,"SCALE"),this.min=t,this.max=e,this.step=n,this.html=this._createHTML()}exportControls(){return["RECT_SCALE_X","RECT_SCALE_Y","_RECT_SCALE_BOX"]}_createHTML(){let t=`\n            <div id="${this.id}" class="m-control--container m-rect-scale">\n        `;return t+=this._createScaleSlider("x scale","RECT_SCALE_X"),t+=this._createScaleSlider("y scale","RECT_SCALE_Y"),t+=this._createCheckbox("same x and y scale","_RECT_SCALE_BOX"),t+"</div>"}_createScaleSlider(t,e){return`\n            <div id="${e}" class="m-subcontrol">\n                <div class="m-subcontrol--label">${t}</div>\n                <div class="m-subcontrol--input">\n                    <input type="range" min="${this.min}" max="${this.max}" step="${this.step}">\n                </div>\n                <div class="m-subcontrol--display">${this.value}</div>\n            </div>\n        `}_createCheckbox(t,e){return`\n            <div id="${e}" class="m-subcontrol">\n                <div class="m-subcontrol--label">${t}</div>\n                <div class="m-subcontrol--input">\n                    <input type="checkbox" checked>\n                </div>\n                <div class="m-subcontrol--display"></div>\n            </div>\n        `}getValue(){const t=document.getElementById("RECT_SCALE_X"),e=document.getElementById("RECT_SCALE_Y");return{x:t.getElementsByTagName("input")[0].value,y:e.getElementsByTagName("input")[0].value}}handleInput(t){const e=document.getElementById("_RECT_SCALE_BOX").getElementsByTagName("input")[0],n=document.getElementById("RECT_SCALE_X").getElementsByTagName("input")[0],s=document.getElementById("RECT_SCALE_Y").getElementsByTagName("input")[0];if(!0===e.checked){"RECT_SCALE_Y"===t.target.closest(".m-subcontrol").id?n.value=s.value:s.value=n.value}const i=document.getElementById("RECT_SCALE_X").getElementsByClassName("m-subcontrol--display")[0],a=document.getElementById("RECT_SCALE_Y").getElementsByClassName("m-subcontrol--display")[0];return i.innerHTML=n.value,a.innerHTML=s.value,{x:n.value,y:s.value}}}class Slider extends Control{constructor(t,e,n,s,i,a){super(t,i,a),this.min=e,this.max=n,this.step=s,this.html=this._createHTML()}_createHTML(){return this.html=`\n            <div id="${this.id}" class="m-control--container m-slider">\n                <div class="m-control--label">${this.name}</div>\n                <div class="m-control--input">\n                    <input type="range" min="${this.min}" max="${this.max}" step="${this.step}">\n                </div>\n                <div class="m-control--display">${this.value}</div>\n            </div>\n        `}getValue(){return document.getElementById(this.id).getElementsByTagName("input")[0].value}exportControls(){return[this.id]}handleInput(){const t=document.getElementById(this.id),e=t.getElementsByTagName("input")[0].value;return t.getElementsByClassName("m-control--display")[0].innerText=e,e}}class Checkbox extends Control{constructor(t,e,n){super(t,e,n),this.html=this._createHTML()}_createHTML(){return this.html=`\n            <div id="${this.id}" class="m-control--container m-slider">\n                <div class="m-control--label">${this.name}</div>\n                <div class="m-control--input">\n                    <input type="checkbox" ${this.value?"checked":""}>\n                </div>\n                <div class="m-control--display"></div>\n            </div>\n        `}getValue(){return document.getElementById(this.id).getElementsByTagName("input")[0].value}exportControls(){return[this.id]}handleInput(){return document.getElementById(this.id).getElementsByTagName("input")[0].value}}